searchState.loadedDescShard("clovers_runtime", 0, "Runtime functions of the <code>clovers</code> renderer.\nGlobal options\nEnable some debug logging\nAlternative rendering methods for debug visualization …\nAn opinionated method for drawing a scene using the CPU …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAlternative rendering method. Only returns a normalmap of …\nSuppress most of the text output\nSampler architecture for the renderer, based on the …\nAn opinionated colorize method. Given a Ray and a Scene, …\nVisualizes the BVH traversal count - how many BVH nodes …\nVisualizes the primitive traversal count - how many …\nThe main drawing function, returns a <code>Vec&lt;Srgb&gt;</code> as a …\nRendering function for getting a normal map in tangent …\nGiven a surface normal, return a color based on normal …\nDebug view for BVH ray hit count\nOpenEXR, high dynamic range\nSplit at the Longest Axis Midpoint of the current AABB\nSurface normals of the first hit\nFull path tracing, the default\nPortable Network Graphics, lossless, standard dynamic range\nDebug view for primitive object ray hit count\nSplit based on the Surface Area Heuristic.\nBVH construction algorithm.\nFile format selection for the output. Multiple formats can …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight of the image in pixels.\nInput filename / location\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum evaluated bounce depth for each ray.\nRendering mode.\nOutput file path, without extension. Defaults to …\nSampler to use for rendering.\nNumber of samples to generate per each pixel.\nWidth of the image in pixels.\nBlue noise based sampler\nRandom number generator based sampler\nA collection of random values to be used for each sample. …\nEnum of the supported samplers.\nVarious sampling dimensions used by the samplers\nA sampler based on blue noise. Works especially well at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>(x,y)</code> offset used in the lens equations for aperture / …\nIntra-pixel <code>(x,y)</code> offset, both in range <code>[0..1]</code>. Used for …\nA sampler based on a random number generator. This is the …\nManually request a sample from the specific dimension\nThe time of the ray, in range <code>[0..1]</code>\nWavelength of the ray\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA serialized representation of a Scene.\nReturns the argument unchanged.\nInitializes a new Scene instance by parsing the contents …\nCalls <code>U::from(self)</code>.\nThe main path tracing function. Sends a <code>Ray</code> to the <code>Scene</code>, …")