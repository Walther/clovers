searchState.loadedDescShard("clovers", 0, "clovers - ray tracing in rust!\nA pointer type that uniquely owns a heap allocation of …\nInternal type alias: a nalgebra Unit of a Vector3\nInternal type alias: a nalgebra Vector3. Intended for …\nInternal const: epsilon used in the hit calculation of a …\nInternal const: epsilon used for having a finitely-sized …\nInternal const: epsilon used for avoiding “shadow acne”…\nInternal type alias: this allows the crate to easily …\nInternal helper: re-exports the pi constant as our …\nInternal type alias: a nalgebra Vector3. Intended as a …\nA contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …\nInternal type alias: a nalgebra Vector2 which is a vector …\nInternal type alias: a nalgebra Vector3 which is a vector …\nInternal type alias: a nalgebra Vector4 which is a vector …\nAxis-aligned bounding box.\nReturns a reference to the underlying allocator.\nReturns a reference to the underlying allocator.\nMoves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …\nReturns a raw mutable pointer to the <code>Box</code>’s contents.\nReturns a raw mutable pointer to the vector’s buffer, or …\nExtracts a mutable slice of the entire vector.\nReturns a <code>NonNull</code> pointer to the vector’s buffer, or a …\nReturns a raw pointer to the <code>Box</code>’s contents.\nReturns a raw pointer to the vector’s buffer, or a …\nExtracts a slice containing the entire vector.\nConverts to <code>Box&lt;[T], A&gt;</code>.\nConverts to <code>Box&lt;T, A&gt;</code>.\nBounding Volume Hierarchy acceleration structures and …\nCamera. Used for creating Rays towards the scene, with …\nReturns the total number of elements the vector can hold …\nClears the vector, removing all values.\nReturns a new box with a <code>clone()</code> of this box’s contents.\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nCopies <code>source</code>’s contents into <code>self</code> without creating a …\nOverwrites the contents of <code>self</code> with a clone of the …\nInitialization structures for colors. This exists for …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nThe data storage that contains all the matrix components. …\nRemoves consecutive repeated elements in the vector …\nRemoves all but the first of consecutive elements in the …\nRemoves all but the first of consecutive elements in the …\nCreates a <code>Box&lt;T&gt;</code>, with the <code>Default</code> value for T.\nCreates an empty <code>Vec&lt;T&gt;</code>.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nDowncasts the box to a concrete type.\nRemoves the subslice indicated by the given range from the …\nClones and appends all elements in a slice to the <code>Vec</code>.\nGiven a range <code>src</code>, clones a slice of elements in that …\nCreates an iterator which uses a closure to determine if …\nConverts a vector into a boxed slice.\nConverts a <code>Cow</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code>.\nConverts a <code>str</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a <code>String</code> into a box of dyn <code>Error</code>.\nReturns the argument unchanged.\nConverts a <code>String</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts the given <code>String</code> to a boxed <code>str</code> slice that is …\nConverts a <code>CString</code> into a Box&lt;CStr&gt; without copying or …\nConverts a <code>Cow&lt;&#39;a, CStr&gt;</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>&amp;mut CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the …\nConverts a <code>T</code> into a <code>Box&lt;T&gt;</code>\nConverts a <code>&amp;CStr</code> into a <code>Box&lt;CStr&gt;</code>, by copying the contents …\nConverts a <code>Cow</code> into a box of dyn <code>Error</code> + <code>Send</code> + <code>Sync</code>.\nConverts a type of <code>Error</code> + <code>Send</code> + <code>Sync</code> into a box of dyn …\nConverts a type of <code>Error</code> into a box of dyn <code>Error</code>.\nConverts a <code>[T; N]</code> into a <code>Box&lt;[T]&gt;</code>\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nConverts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into a Box&lt;OsStr&gt;, by copying …\nConverts an <code>OsString</code> into a Box&lt;OsStr&gt; without copying or …\nConverts a <code>Box&lt;str&gt;</code> into a <code>Box&lt;[u8]&gt;</code>\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a reference.\nCreates a boxed <code>Path</code> from a clone-on-write pointer.\nConverts a <code>PathBuf</code> into a Box&lt;Path&gt;.\nConverts a <code>Cow&lt;&#39;_, str&gt;</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;mut str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>&amp;str</code> into a <code>Box&lt;str&gt;</code>\nConverts a <code>Cow&lt;&#39;_, [T]&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;mut [T]</code> into a <code>Box&lt;[T]&gt;</code>\nConverts a <code>&amp;[T]</code> into a <code>Box&lt;[T]&gt;</code>\nCopies the string into a newly allocated Box&lt;OsStr&gt;.\nReturns the argument unchanged.\nConverts a clone-on-write slice into a vector.\nConverts a boxed slice into a vector by transferring …\nAllocates a <code>Vec&lt;u8&gt;</code> and fills it with a UTF-8 string.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nAllocates a <code>Vec&lt;T&gt;</code> and fills it by cloning <code>s</code>’s items.\nConverts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nAllocates a <code>Vec&lt;T&gt;</code> and moves <code>s</code>’s items into it.\nConverts the given <code>String</code> to a vector <code>Vec</code> that holds …\nTurn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.\nConverts a <code>CString</code> into a Vec&lt;u8&gt;.\nConvert all colors in place, without reallocating.\nConvert all colors in place, without reallocating.\nConvert all colors in place, without reallocating.\nConvert all colors in place, without reallocating.\nConstructs a box from a <code>NonNull</code> pointer.\nConstructs a box from a <code>NonNull</code> pointer in the given …\nCreates a <code>Vec&lt;T&gt;</code> directly from a <code>NonNull</code> pointer, a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a <code>NonNull</code> pointer, a …\nConstructs a box from a raw pointer.\nConstructs a box from a raw pointer in the given allocator.\nCreates a <code>Vec&lt;T&gt;</code> directly from a pointer, a length, and a …\nCreates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a length, a …\nAn abstraction for things that can be hit by Rays.\nThe main data structure returned for every surface …\nSpectral power distributions of various illuminants.\nInserts an element at position <code>index</code> within the vector, …\nInserts an element at position <code>index</code> within the vector, …\nInterval helper adapted from the book\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the boxed slice into a boxed array.\nConverts a <code>Box&lt;T&gt;</code> into a <code>Box&lt;[T]&gt;</code>\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nGroups every <code>N</code> elements in the <code>Vec&lt;T&gt;</code> into chunks to …\nTakes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.\nConsumes the <code>Box</code>, returning the wrapped value.\nCreates a consuming iterator, that is, one that moves each …\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer.\nConsumes the <code>Box</code>, returning a wrapped <code>NonNull</code> pointer and …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConverts a <code>Box&lt;T&gt;</code> into a <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not …\nConsumes the <code>Box</code>, returning a wrapped raw pointer.\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nDecomposes a <code>Vec&lt;T&gt;</code> into its raw components: …\nConsumes the <code>Box</code>, returning a wrapped raw pointer and the …\nReturns <code>true</code> if the vector contains no elements.\nConsumes and leaks the <code>Box</code>, returning a mutable reference, …\nConsumes and leaks the <code>Vec</code>, returning a mutable reference …\nReturns the number of elements in the vector, also …\nMaterials enable different behaviors of light on objects.\nAllocates memory on the heap and then places <code>x</code> into it.\nConstructs a new, empty <code>Vec&lt;T&gt;</code>.\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code>.\nConstructs a new box with uninitialized contents.\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents.\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nVarious literal objects and meta-object utilities for …\nOrthonormal bases\nProbability density functions\nReturns a mutable reference to the last item in the …\nConstructs a new <code>Pin&lt;Box&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Box&lt;T, A&gt;&gt;</code>. If <code>T</code> does not implement …\nRemoves the last element from a vector and returns it, or …\nRemoves and returns the last element from a vector if the …\nAppends an element to the back of a collection.\nAppends an element to the back of a collection, returning …\nAppends an element and returns a reference to it if there …\nAppends an element if there is sufficient spare capacity, …\nVarious internal helper functions for getting specific …\nThe very core of the ray tracing rendering itself: the Ray\nRemoves and returns the element at position <code>index</code> within …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nResizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.\nRetains only the elements specified by the predicate.\nRetains only the elements specified by the predicate, …\nA collection of objects, camera, and other things …\nForces the length of the vector to <code>new_len</code>.\nShrinks the capacity of the vector with a lower bound.\nShrinks the capacity of the vector as much as possible.\nReturns the remaining spare capacity of the vector as a …\nUtilities for Physically Meaningful Rendering using …\nCreates a splicing iterator that replaces the specified …\nReturns vector content as a slice of <code>T</code>, along with the …\nSplits the collection into two at the given index.\nRemoves an element from the vector and returns it.\nTextures enable different surface textures for colorizing …\nShortens the vector, keeping the first <code>len</code> elements and …\nAttempts to convert a <code>Box&lt;[T]&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAttempts to convert a <code>Vec&lt;T&gt;</code> into a <code>Box&lt;[T; N]&gt;</code>.\nAllocates memory on the heap then places <code>x</code> into it, …\nAllocates memory in the given allocator then places <code>x</code> into …\nConstructs a new box with uninitialized contents on the …\nConstructs a new box with uninitialized contents in the …\nConstructs a new boxed slice with uninitialized contents. …\nConstructs a new boxed slice with uninitialized contents …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new <code>Box</code> with uninitialized contents, with the …\nConstructs a new boxed slice with uninitialized contents, …\nConstructs a new boxed slice with uninitialized contents …\nTries to reserve capacity for at least <code>additional</code> more …\nTries to reserve the minimum capacity for at least …\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nThe fundamental building blocks of spectral rendering.\nConstructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …\nConstructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …\nWrites the value and converts to <code>Box&lt;T, A&gt;</code>.\nAxis-aligned bounding box Defined by two opposing corners, …\nReturns the area of this <code>AABB</code>.\nReturns the interval of the given axis.\nThe inverse method for <code>AABB::new</code>: given an existing …\nReturns the centroid of this <code>AABB</code>.\nGiven two axis-aligned bounding boxes, return a new AABB …\nDistance of a <code>Ray</code> to the bounding box.\nReturns the argument unchanged.\nGiven a Ray, returns whether the ray hits the bounding box …\nCalls <code>U::from(self)</code>.\nCreates a new axis-aligned bounding box from three …\nCreates a new axis-aligned bounding box from two …\nMake sure we don’t have a zero-thickness AABB, padding …\nThe bounding interval on the X axis\nThe bounding interval on the Y axis\nThe bounding interval on the Z axis\nBounding Volume Hierarchy Node.\nThe choice of algorithms used for constructing the …\nSplitting method based on the longest axis of the current …\nSplitting method based on the Surface Area Heuristic.\nReturns the axis-aligned bounding box AABB of the objects …\nBounding box containing both of the child nodes\nReturns the count of the nodes in the tree\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>BVHNode</code> tree from a given list of Objects\nThe main <code>hit</code> function for a <code>BVHNode</code>. Given a Ray, and an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeft child of the <code>BVHNode</code>\nReturns a probability density function value based on the …\nAlternate hit method that maintains a test count for the …\nReturns a random point on the surface of one of the …\nRight child of the <code>BVHNode</code>\nAlternate hit method that maintains a test count for the …\nThe main Camera object used in the ray tracing.\nRepresents the fields that can be described in a Scene …\nDescribes the size of the aperture of the camera.\nDescribes the distance at which the camera has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a new Ray from the camera\nDefines the horizontal axis for the camera.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the lens radius for the camera. TODO: understand …\nDescribes where the camera is looking at\nDescribes where the camera is\nCoordinate of the lower left corner of the camera.\nCreates a new Camera with the given parameters.\nDefines the origin of the camera.\nDefines the earliest starting time for the camera, used …\nDefines the latest ending time for the camera, used when …\nU\nDescribes the subjective “up” direction for the camera …\nV\nDefines the vertical axis for the camera.\nDescribes the vertical field of view for the camera\nThe forward direction of the camera; the difference …\nLegacy color, assume Srgb given as array of three floats …\nInitialization structure for a color. Contains either an …\nHex “web color” Srgb\nLinear Srgb\nOklch\nNon-linear Srgb\nTypesafe color initialization structure\nType safe initialization structure for a color. Can be …\nXYZ, D65 illuminant\nXYZ, E illuminant\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmpty hitable. Cannot be hit. Exists only as an internal …\nEnumeration of all runtime entities that can be …\nA list of <code>Hitable</code>s, occasionally used as the leaf of …\nThe main trait for entities that can be intersect aka “…\nReturns the bounding box of the entity.\nReturns the bounding box of the entity.\nReturns the center point of the hitable\nReturns the center point of the hitable\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a tuple of <code>(front_face, normal)</code>. Used in lieu of …\nThe main intersection method.\nThe main intersection method.\nHitables in the list\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>HitableList</code>.\nProbability density function value method, used for …\nProbability density function value method, used for …\nRandom point on the entity, used for multiple importance …\nRandom point on the entity, used for multiple importance …\nRepresents a ray-object intersection, with plenty of data …\nDistance from the ray origin to the hitpoint\nReturns the argument unchanged.\nIs the hitpoint at the front of the surface\nCalls <code>U::from(self)</code>.\nReference to the material at the hitpoint\nSurface normal from the hitpoint\n3D coordinate of the hitpoint\nSets the face normal of this <code>HitRecord</code>.\nU surface coordinate of the hitpoint\nV surface coordinate of the hitpoint\nStandard illuminant <code>D50</code>\nStandard illuminant <code>D65</code>\nStandard illuminant <code>FL1</code>\nStandard illuminant <code>FL10</code>\nStandard illuminant <code>FL11</code>\nStandard illuminant <code>FL12</code>\nStandard illuminant <code>FL2</code>\nStandard illuminant <code>FL3</code>\nStandard illuminant <code>FL3_1</code>\nStandard illuminant <code>FL3_10</code>\nStandard illuminant <code>FL3_11</code>\nStandard illuminant <code>FL3_12</code>\nStandard illuminant <code>FL3_13</code>\nStandard illuminant <code>FL3_14</code>\nStandard illuminant <code>FL3_15</code>\nStandard illuminant <code>FL3_2</code>\nStandard illuminant <code>FL3_3</code>\nStandard illuminant <code>FL3_4</code>\nStandard illuminant <code>FL3_5</code>\nStandard illuminant <code>FL3_6</code>\nStandard illuminant <code>FL3_7</code>\nStandard illuminant <code>FL3_8</code>\nStandard illuminant <code>FL3_9</code>\nStandard illuminant <code>FL4</code>\nStandard illuminant <code>FL5</code>\nStandard illuminant <code>FL6</code>\nStandard illuminant <code>FL7</code>\nStandard illuminant <code>FL8</code>\nStandard illuminant <code>FL9</code>\nStandard illuminant <code>LED_B1</code>\nStandard illuminant <code>LED_B2</code>\nStandard illuminant <code>LED_B3</code>\nStandard illuminant <code>LED_B4</code>\nStandard illuminant <code>LED_B5</code>\nStandard illuminant <code>LED_BH1</code>\nStandard illuminant <code>LED_RGB1</code>\nStandard illuminant <code>LED_V1</code>\nStandard illuminant <code>LED_V2</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn interval structure.\nReturns the center of this <code>Interval</code>\nConstructs a new interval from two intervals\nReturns an interval expanded with delta at both ends\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLargest value of the interval. Must be kept in order\nSmallest value of the interval. Must be kept in order\nConstructs a new interval\nReturns the size of the interval\n<code>ConeLight</code> material\n<code>Dielectric</code> material\nA matte material that does not reflect rays\n<code>DiffuseLight</code> material\n<code>Dispersive</code> material\n<code>Isotropic</code> material\nAn enum for the material kind\n<code>Lambertian</code> material\nThe main material struct for the renderer.\nInitialization structure for a <code>Material</code>. Either contains a …\nTrait for materials. Requires three function …\nEnum for the types of materials: Diffuse and Specular …\n<code>Metal</code> material\nOwned material structure\nA record of an scattering event of a Ray on a Material.\nName of the shared material\nA <code>Material</code> that can be referred to by name for reuse …\nA shiny material that reflects some rays\nReturns the spectral reflectance of the material sampled …\nReturns the spectral reflectance of the material’s …\nReturns the spectral reflectance of the material sampled …\nA cone light material.\nA dielectric material. This resembles glass and other …\nA diffuse light material.\nDispersive material. Based on Cauchy’s equation\nReturns the spectral power of the material sampled at the …\nReturns the spectral power of the material sampled at the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrapper for GLTF materials.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the material has wavelength-dependent …\nReturns true if the material has wavelength-dependent …\nIsotropic material.\nThe inner material with properties and method …\nLambertian material. This is the default material with a …\nThe shared material itself\nThe material type that was scattered on\nA metal material.\nName of the shared material\nProbability density function to use with the <code>ScatterRecord</code>.\nGiven a ray and a hitrecord, return the possible …\nGiven a ray and a hitrecord, return the possible …\nTODO: explain\nTODO: explain\nDirection of a generated specular ray\nAn iridescence feature based on thin-film interference.\nOptional thin film interference layer on top of the …\nA cone light material. The material emits light if the …\nCreates a new <code>ConeLight</code> with white light at intensity <code>100.0</code>…\nEmission function for <code>ConeLight</code>. If the given <code>HitRecord</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ConeLight</code> material with the given Texture.\nScatter method for the <code>ConeLight</code> material. Always returns …\nA dielectric material. This resembles glass and other …\nColor of the material. Used for colorizing the rays. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRefractive index of the material. Used for calculating the …\nScatter method for the Dielectric material. Given a <code>ray</code> …\nA diffuse light material. On this material, rays never …\nCreates a new <code>DiffuseLight</code> with white light at intensity …\nEmission function for <code>DiffuseLight</code>. If the given <code>HitRecord</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>DiffuseLight</code> material with the given Texture.\nScatter method for the <code>DiffuseLight</code> material. Always …\nA dispersive glass material.\nCauchy coefficient A of the material\nCauchy coefficient B of the material\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Dispersive material with the given Cauchy …\nCalculates the refractive index of the material for the …\nGLTF Material wrapper type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInitialize a new GLTF material wrapper\nIsotropic material. Used in <code>ConstantMedium</code>. TODO: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Isotropic material with an albedo of the …\nReturns a <code>ScatterRecord</code> based on the <code>HitRecord</code> coordinates …\nReturns the scattering probability density function for …\nLambertian material. This is the default material with a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the Lambertian material with an …\nReturns None, if ray is absorbed. Otherwise, returns a …\nReturns the scattering probability density function for …\nA metal material. The amount of reflection can be adjusted …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new Metal material with the albedo of the given …\nScatter function for the Metal material. Metal always …\nAn iridescence feature based on thin-film interference.\nReturns the argument unchanged.\nCalculates the strength of the interference. This should …\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>ThinFilm</code> with the specified …\nRefractive index of the material.\nThickness of the film in nanometers.\nBoxy object initializer\n<code>ConstantMedium</code> object initializer\nGLTF object initializer\n<code>MovingSphere</code> object initializer\nAn object enum. TODO: for ideal clean abstraction, this …\nA list of objects. Allows multiple objects to be used e.g. …\n<code>ObjectList</code> object initializer\nPLY object initializer\nQuad object initializer\n<code>RotateY</code> object initializer\nSTL object initializer\nSphere object initializer\nTranslate object initializer\nTriangle object initializer\nA box or a cuboid object: a parallelepiped with six …\n<code>ConstantMedium</code> object. This should probably be a Material …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGLTF format support for the renderer\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA moving sphere object.\nInitializes an <code>Object</code> into a <code>Hitable</code>.\nThe encased Object list\nPLY utilities\nPriority\nA quadrilateral object.\nUtility object for rotating another object.\nA sphere object.\nSTL utilities\nUtility object for translating i.e. moving another object.\nA triangle object. Almost exact copy of Quad, with an …\nA box or a cuboid object: a parallelepiped with six …\n<code>BoxyInit</code> structure describes the necessary data for …\nReturns the axis-aligned bounding box AABB of the object.\nAxis-aligned bounding box\nFirst corner for the box\nSecond, opposing corner for the box\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe main <code>hit</code> function for a Boxy. Given a Ray, and an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial used for the box\nThe material of the box\nInitializes a new instance of a box, given two opposing …\nReturns a probability density function value?\nUsed for multiple importance sampling\n<code>ConstantMedium</code> object. This should probably be a Material …\n<code>ConstantMediumInit</code> structure describes the necessary data …\nReturns the axis-aligned bounding box AABB of the defining …\nThe boundary object for the constant medium. This …\nDensity of the fog. TODO: example good value range?\nReturns the argument unchanged.\nReturns the argument unchanged.\nHit function for the <code>ConstantMedium</code> object. Returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ConstantMedium</code> with a known size, shape and …\nReturns a probability density function value based on the …\nUsed for multiple importance sampling\nTexture used for the colorization of the fog.\nInternal GLTF object representation after initialization.\nGLTF initialization structure\nInternal GLTF object representation after initialization.\nAxis-aligned bounding box of the object\nAxis-aligned bounding box of the object\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHitables of the <code>GLTF</code> object. Most likely a list of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial of the object\nCreate a new STL object with the given initialization …\nInitialize a new GLTF object\nPath of the .gltf file\nUsed for multiple importance sampling\nA moving sphere object. This is represented by one <code>radius</code>, …\n<code>SphereInit</code> structure describes the necessary data for …\nReturns the axis-aligned bounding box of the <code>MovingSphere</code> …\nAxis-aligned bounding box\nReturns the interpolated center of the moving sphere at …\nCenter point of the sphere at <code>time_0</code>\nCenter point of the sphere at <code>time_0</code>\nCenter point of the sphere at <code>time_1</code>\nCenter point of the sphere at <code>time_1</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the U,V surface coordinates of a hitpoint\nHit method for the <code>MovingSphere</code> object. First gets the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial of the sphere.\nMaterial of the sphere\nCreates a new <code>MovingSphere</code> object. See the struct …\nUsed for multiple importance sampling\nRadius of the sphere.\nRadius of the sphere\nTime 0\nTime 1\nInternal PLY object representation after initialization. …\nPLY structure. This gets converted into an internal …\nAxis-aligned bounding box of the object\nLocation of the object in the rendered scene\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrimitives of the <code>PLY</code> object, a list of <code>Triangle</code>s.\nInitializes a PLY\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial for the object\nMaterial to use for the .ply object\nPath of the .ply file\nUsed for multiple importance sampling\nRotation of the object. Described as three angles, <code>roll</code>, …\nScaling factor for the object\nQuadrilateral shape. This can be an arbitrary …\nInitialization structure for a Quad object.\nReturns the bounding box of the quad\nBounding box of the surface\nArea of the surface\nWhat is this? // TODO: understand, explain\nReturns the argument unchanged.\nReturns the argument unchanged.\nHit method for the quad rectangle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial of the surface\nMaterial of the surface\nCreates a new quad\nNormal vector of the surface\nReturns a probability density function value? // TODO: …\nUsed for multiple importance sampling\nCorner point\nCorner point\nReturns a random point on the quadrilateral surface\nVector describing the u side\nVector describing the u side\nVector describing the v side\nVector describing the v side\nWhat is this? // TODO: understand, explain\n<code>RotateInit</code> structure describes the necessary data for …\n<code>RotateY</code> object. It wraps the given Object and has adjusted …\nBounding box method for the <code>RotateY</code> object. Finds the …\nAngle to rotate the object, in degrees\nReturns the argument unchanged.\nReturns the argument unchanged.\nHit method for the <code>RotateY</code> object. Finds the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>RotateY</code> object. It wraps the given Object …\nThe encased Object to rotate\nUsed for multiple importance sampling\nA sphere object.\n<code>SphereInit</code> structure describes the necessary data for …\nReturns the axis-aligned bounding box AABB for the sphere.\nCenter of the sphere.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the U,V surface coordinates of a hitpoint\nHit method for the Sphere object. Returns a <code>HitRecord</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial of the sphere.\nCreates a new <code>Sphere</code> object with the given center, radius …\nReturns the probability density function for the sphere? …\nUsed for multiple importance sampling\nRadius of the sphere.\nUtility function from Ray Tracing: The Rest of Your Life.\nInternal STL object representation after initialization. …\nSTL structure. This gets converted into an internal …\nAxis-aligned bounding box of the object\nLocation of the object in the rendered scene\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrimitives of the <code>STL</code> object. Most likely a list of …\nInitializes an STL\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial for the object\nMaterial to use for the .stl object\nPath of the .stl file\nUsed for multiple importance sampling\nRotation of the object. Described as three angles, <code>roll</code>, …\nScaling factor for the object\nTranslate object. It wraps the given Object and has …\n<code>TranslateInit</code> structure describes the necessary data for …\nBounding box method for the Translate object. Finds the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHit method for the Translate object. Finds the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Translate</code> object. It wraps the given Object …\nThe encased Object to translate i.e. move\nThe vector describing the movement of the object\nReturns a probability density function value based on the …\nUsed for multiple importance sampling\nTriangle shape. Heavily based on Quad and may contain …\nInitialization structure for a triangle primitive\nReturns the bounding box of the triangle\nBounding box of the surface\nArea of the surface\nWhat is this? // TODO: understand, explain\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new triangle from three Cartesian space …\nHit method for the triangle\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial of the surface\nMaterial of the surface\nCreates a new triangle from a coordinate point and two …\nNormal vector of the surface\nReturns a probability density function value? // TODO: …\nUsed for multiple importance sampling\nCorner point\nCorner point\nReturns a random point on the triangle surface\nVector describing the u side\nVector describing the u side\nVector describing the v side\nVector describing the v side\nWhat is this? // TODO: understand, explain\nAn orthonormal basis structure.\nBuilds a new ONB structure given a normal vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the ONB-projected version of the provided vector?\nU\nV\nW\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInternal helper.\nInternal helper.\nInternal helper.\nInternal helper.\nA Ray has an origin and a direction, as well as an instant …\nThe direction of the ray.\nEvaluates the position (coordinate) at which the ray is at …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe origin of the ray.\nThe time instant at which the ray exists.\nWavelength of the ray\nA representation of the scene that is being rendered.\nThe background color to use when the rays do not hit …\nBounding-volume hierarchy of Hitable objects in the scene. …\nThe camera object used for rendering the scene.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>BVHNode</code> tree of priority objects - e.g. glass items or …\nSpectral Power Distribution\nReturns the argument unchanged.\nEvaluate the spectral power at the given wavelength.\nCalls <code>U::from(self)</code>.\nPrecomputes a new spectral power distrubtion for a given …\nHand-converted from <code>spectra_xyz_5nm_380_780_0.97.h</code> in the …\nEvaluate the spectrum at the given wavelength for the …\nEvaluate the spectral powers at the given multiple …\nHand-converted from <code>spectrum_grid.h</code> in the supplemental …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGLTF material as a texture - a bit of a hack\nStandard Illuminant <code>D50</code>\nStandard Illuminant <code>D65</code>\nStandard Illuminant <code>FL1</code>\nStandard Illuminant <code>FL10</code>\nStandard Illuminant <code>FL11</code>\nStandard Illuminant <code>FL12</code>\nStandard Illuminant <code>FL2</code>\nStandard Illuminant <code>FL3</code>\nStandard Illuminant <code>FL3_1</code>\nStandard Illuminant <code>FL3_10</code>\nStandard Illuminant <code>FL3_11</code>\nStandard Illuminant <code>FL3_12</code>\nStandard Illuminant <code>FL3_13</code>\nStandard Illuminant <code>FL3_14</code>\nStandard Illuminant <code>FL3_15</code>\nStandard Illuminant <code>FL3_2</code>\nStandard Illuminant <code>FL3_3</code>\nStandard Illuminant <code>FL3_4</code>\nStandard Illuminant <code>FL3_5</code>\nStandard Illuminant <code>FL3_6</code>\nStandard Illuminant <code>FL3_7</code>\nStandard Illuminant <code>FL3_8</code>\nStandard Illuminant <code>FL3_9</code>\nStandard Illuminant <code>FL4</code>\nStandard Illuminant <code>FL5</code>\nStandard Illuminant <code>FL6</code>\nStandard Illuminant <code>FL7</code>\nStandard Illuminant <code>FL8</code>\nStandard Illuminant <code>FL9</code>\nStandard Illuminant <code>LED-B1</code>\nStandard Illuminant <code>LED-B2</code>\nStandard Illuminant <code>LED-B3</code>\nStandard Illuminant <code>LED-B4</code>\nStandard Illuminant <code>LED-B5</code>\nStandard Illuminant <code>LED-BH1</code>\nStandard Illuminant <code>LED-RGB1</code>\nStandard Illuminant <code>LED-V1</code>\nStandard Illuminant <code>LED-V2</code>\n<code>SolidColor</code> texture\n<code>SpatialChecker</code> texture\n<code>SurfaceChecker</code> texture\nA texture enum.\nThe main texture trait\nReturns the spectral reflectance of the texture sampled at …\nReturns the spectral reflectance of the texture sampled at …\nReturns the spectral power of the texture sampled at the …\nReturns the spectral power of the texture sampled at the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA solid color texture.\nCheckered texture based on the world coordinates.\nCheckered texture based on the surface coordinates of an …\nA solid color texture. Simplest possible Texture: returns …\nInitialization structure for a solid color texture.\nEvaluates the color ignoring the given surface coordinates …\nInitialization struct for the color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new solid color texture with the specified color.\nA standard checkered texture based on spatial 3D texturing.\nA standard checkered texture based on spatial 3D texturing.\nEvaluates the color at the given spatial position …\nControls the density of the checkered pattern. Default …\nControls the density of the checkered pattern. Default …\nUniform color for the even-numbered checkers of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SpatialChecker</code> object with the specified …\nUniform color for the odd-numbered checkers of the texture.\nA standard checkered texture based on 2D surface UV …\nA standard checkered texture based on 2D surface UV …\nEvaluates the color at the given surface position …\nControls the density of the checkered pattern. Default …\nControls the density of the checkered pattern. Default …\nUniform color for the even-numbered checkers of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SurfaceChecker</code> object with the specified …\nUniform color for the odd-numbered checkers of the texture.\nThe upper bound for the wavelenghts, exclusive\nThe lower bound for the wavelengths, inclusive\nThe range of wavelenghts used, inclusive low, exclusive …\nThe length of the wavelength spectrum used\nThe probability of picking a specific wavelength\nThe count of wavelenghts used per ray in Hero Wavelength …\nWavelength in nanometers\nReturn a random wavelength, sampled uniformly from the …\nGiven a hero wavelength, create additional equidistant …\nGiven a sample seed from a sampler, return the approximate …\nHelper function adapted from …")